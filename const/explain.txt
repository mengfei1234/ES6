一。const
1.声明一个只读的常量。一旦声明，常量的值就不能改变
2.只声明不赋值就会报错
3.与let相同，只在声明所在的块级作用域内有效
4.const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用
5.const声明的常量，也与let一样不可重复声明。


二。ES6声明变量的六种方法
    var function let const import class


三。
1.ES5：顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。
2.ES6：为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，
  依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。
  也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。


四。globalThis 对象
1.浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。
2.浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。
3.Node 里面，顶层对象是global，但其他环境都不支持。
ES2020 在语言标准的层面，引入globalThis作为顶层对象。
也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。
方法：// 方法一
(typeof window !== 'undefined'
   ? window
   : (typeof process === 'object' &&
      typeof require === 'function' &&
      typeof global === 'object')
     ? global
     : this);

// 方法二
var getGlobal = function () {
  if (typeof self !== 'undefined') { return self; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  throw new Error('unable to locate global object');
};
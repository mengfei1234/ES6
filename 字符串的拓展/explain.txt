一。字符的 Unicode 表示法
"\u20BB7"
// " 7"
上面代码表示，如果直接在\u后面跟上超过0xFFFF的数值（比如\u20BB7），
JavaScript 会理解成\u20BB+7。
由于\u20BB是一个不可打印字符，所以只会显示一个空格，后面跟着一个7。
/////////////
ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。
"\u{20BB7}"
// "𠮷"
二。字符串的遍历器接口
除了遍历字符串，这个遍历器最大的优点是可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点
let text = String.fromCodePoint(0x20BB7);

for (let i = 0; i < text.length; i++) {
  console.log(text[i]);
}
// " "
// " "

for (let i of text) {
  console.log(i);
}
// "𠮷"
上面代码中，字符串text只有一个字符，但是for循环会认为它包含两个字符（都不可打印），而for...of循环会正确识别出这一个字符。
三。直接输入 U+2028 和 U+2029
四。JSON.stringify() 的改造
五。模板字符串
  模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，
  也可以用来定义多行字符串，或者在字符串中嵌入变量
  // 字符串中嵌入变量
  let name = "Bob", time = "today";
  `Hello ${name}, how are you ${time}?`

  上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<ul>标签前面会有一个换行。
  如果你不想要这个换行，可以使用trim方法消除它
$('#list').html(`
<ul>
  <li>first</li>
  <li>second</li>
</ul>
`.trim());

模板字符串中嵌入变量，需要将变量名写在${}之中。

如果需要引用模板字符串本身，在需要时执行，可以写成函数。

let func = (name) => `Hello ${name}!`;
func('Jack') // "Hello Jack!"
六。实例：模板编译  
         见具体ES6代码
七。标签模板
         见具体ES6代码
八。模板字符串的限制



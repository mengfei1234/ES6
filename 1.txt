1.Let --缩小了作用域----不能定义多个变量
2.箭头操作符--->写函数
 (1) =>  function
 (2) => 相当于function(){}.bind(this)
箭头函数指向是指向this 所指向的东西，在别处就不能改变
3.类和对象之间关系:
  对象都是类实例化而来
  类是对象的类型-->同一个类创建的多个对象，属性名都相同，方法
  和方法体都一样，属性值不同
4.promise是异步编程的一种解决方案（settimeout）
pending（进行中）   resolved（成功）   rejected（失败）
这3个阶段不能重复执行 
对应Ajax请求的3 个状态
promise比timeout快！！！！！
5.fetch是Ajax的promise封装版
   axios是又把fetch封装了一遍
6.数组方法：
  判断数组类型的方法：typeof/instance  of /async
  map:遍历数组
  pop:把数组中最后一个元素删除
  push:添加一个元素到数组的尾部
  concat:合并数组
  split：将字符串转换为数组
  fill:使用给定值，填充一个数组
  entries\keys\values：用于便利数组
  键值对\键名\键值
  flat:将其他数组合并为新的数组
7.解构赋值：
   从数组和对象中提取值，对变量进行复制，这种被称为解构。
8.深拷贝与浅拷贝
   简单点来说，就是假设B复制了A，
   当修改A时，看B是否会发生变化，
   如果B也跟着变了，说明这是浅拷贝，拿人手短，
   如果B没变，那就是深拷贝，自食其力
9.块级作用域：
let: 声明得变量只在块级作用域内有效，不存在变量提升，
     不允许重复声明
const:声明得是常量，不允许重复声明，，不存在变量提升
10.继承：
extends继承属性
constructor   super  继承方法

11.懒加载
懒加载或者按需加载，是一种很好的优化网页或应用的方式。
这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，
立即引用或即将引用另外一些新的代码块。
这样加快了应用的初始加载速度，减轻了它的总体体积，
因为某些代码块可能永远不会被加载
12.set 数组去重的方法
   不会发生类型转换
13.symbol====>新的数据类型（undefined、null、Boolean、String、Number、Object）
由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，
用于对象的属性名，就能保证不会出现同名的属性。
这对于一个对象由多个模块构成的情况非常有用，
能防止某一个键被不小心改写或覆盖。
14.module
是为了大型应用项目简单方便，而把他们拆分为模块




